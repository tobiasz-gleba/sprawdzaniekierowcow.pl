services:
  # Database migration init container
  db-migrate:
    build:
      context: ./app
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_NAME=local
      - DB_USERNAME=root
      - DB_PASSWORD=mysecretpassword
      # Dummy email config for init container
      - EMAIL_USER=init@example.com
      - EMAIL_PASS=dummy
      - SMTP_HOST=localhost
      - SMTP_PORT=587
    command: ["npm", "run", "db:migrate"]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: "no"

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    ports:
      - '3001:3000'
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_NAME=local
      - DB_USERNAME=root
      - DB_PASSWORD=mysecretpassword
      - PORT=3000
      - HOST=0.0.0.0
      # Email Configuration - REPLACE WITH YOUR ACTUAL VALUES
      - EMAIL_USER=your-email@example.com
      - EMAIL_PASS=your-email-password
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      # Public URL for email links
      - PUBLIC_BASE_URL=http://localhost:3001
    depends_on:
      db:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - app-network

  db:
    image: mysql:8.0
    restart: unless-stopped
    # Ports commented out to avoid conflicts - app connects via internal network
    # ports:
    #   - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: mysecretpassword
      MYSQL_DATABASE: local
    volumes:
      - mysqldata:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost', '-u', 'root', '-pmysecretpassword']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  mysqldata:

networks:
  app-network:
    driver: bridge

